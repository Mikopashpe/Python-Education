'''
Основные типы данных в Python делятся на:
    1) Числовые
    2) Строковые
    3) Булевые значения
'''

# Числовые типы данных в свою очередь делятся на подгруппы

a = -5    # Данный тип данных называется целочисленным. При выводе команды видим тип <class 'int'>
print(type(a))


b = 79.0    # Данный тип - число с плавающей точкой. При выводе команды  видим тип <class 'float'>
print(type(b))

c = 21.0 + 2j    # Данный тип - комплексное число, представляющее собой манипуляцию с вещественным числом и мнимой частью. При выводе видим тип <class 'complex'>
print(type(c))

n = a + b - c    # Данные примеры показывают, что манипуляции внутри числового типа проходят успешно
print(n)

m = (a+b)/c
print(m)

# Строковый тип позволяет работать с последовательностью символов, которые обрамляются кавычками

MyName = 'Kate'    # Данные примеры показывают, что, вне зависимости от символов, тип данных примеров <class 'str'>
print(type(MyName))

MyAge = '28'
print(type(MyAge))

# В Python строка является неизменяемым типом данных, но можно создать новую строку, дав ей то же самое имя

v = 'Mein'    # При выводе данной команды получаем ошибку TypeError: 'str' object does not support item assignment
#v[0] = 'N'
# print(v)

v = 'N' + v[1:]    # В данном случае создается новый объект
print(v)

# Следующий тип данных - булево значение, которое выдает нам истину или ложь при соблюдении условий

print(type(bool()))    # Данный тип данных при запросе типа выдает следующее значение <class 'bool'>

print(bool())    # Результат False

print(bool(1))    # Результат True

a, b = -5, 8    
print(a < b)    # Результат True
print(a > b)    # Результат False

print(a < b or b < a)    # Результат True выводится при условии, что хотябы одно из условий верно. В остальных случаях False

print(a + b > b and b < a)    # Здесь требуется соблюдение всех условий. Результат False

print(a < b or b < a and a == b)  # Первым выполняется and, затем or 

